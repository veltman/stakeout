#!/usr/bin/env node

//Dependencies and argument details
var fs = require("fs"),
    path = require("path"),
    _ = require("underscore"),
    mkdirp = require("mkdirp"),
    program = require("commander"),
    yaml = require("js-yaml"),
    notifier = require("./lib/notifier.js"),
    home = require("userhome"),
    prompt = require("prompt"),
    stakeoutDir = home(".stakeout"),
    configurable = [
    {
      name: "SLACK_WEBHOOK_URL",
      message: "Your Slack webhook url:"
    },
    {
      name: "MAILGUN_API_KEY",
      message: "Your Mailgun API key:"
    },
    {
      name: "EMAIL_FROM",
      message: "The \"from\" email address stakeout should use (e.g. 'Notorious B.O.T. <bot@wnyc.org>':"
    },
    {
      name: "EMAIL_SUBJECT_PREFIX",
      message: "The email subject prefix to use (e.g. 'Notification for: '):"
    },
    {
      name: "SLACK_NAME",
      message: "The Slack display name Stakeout should use (e.g. 'Notorious B.O.T.'):"
    },
    {
      name: "SLACK_ICON",
      message: "The emoji Stakeout should use as its icon in Slack (e.g. ':loudspeaker:'):"
    }],
    config;

// Hide the dumb "prompt: " that's on by default
prompt.message = "";
prompt.delimiter = "";

// Create the ~/.stakeout/ directory if it doesn't already exist
mkdirp.sync(stakeoutDir);

// Populate the existing task list
try {
  config = readYAML(path.join(stakeoutDir,"config"));
} catch(e) {

  // Initialize a blank config file
  config = {
    tasks: {}
  };

  configurable.forEach(function(param){
    config[param] = "";
  });

  saveConfig();

}

// Set up commands
program.command("list")
  .description("List existing stakeout tasks.")
  .action(list);

program.command("run <task>")
  .description("Run a stakeout task once.")
  .action(run);

program.command("runall")
  .description("Run all stakeout tasks.")
  .action(runall);

program.command("add <task>")
  .description("Create a new stakeout/task, with an optional description. The task name should probably only use alphanumeric characters, dashes, and underscores.")
  .option("-p, --path <path>", "path to module folder")
  .option("-d, --description <description>", "task description")
  .action(add);

program.command("watch <task> <email/username>")
  .description("Add an email or slack channel/username to be notified for a task.")
  .action(watch);

program.command("remove <task>")
  .description("Remove a task from stakeout.")
  .action(remove);

program.command("unwatch <task> <email/username>")
  .description("Stop notifying an email or slack channel/username for a task.")
  .action(unwatch);

program.command("rename <oldname> <newname>")
  .description("Rename a task.")
  .action(rename);

program.command("config")
  .description("Set required variables for email/Slack integration.")
  .action(doConfig);

program.command("clean <task>")
  .description("Clean out the stored data for a task.")
  .action(clean);

program.command("cleanall")
  .description("Clean out the stored data for all tasks.")
  .action(cleanall);

program.command("init")
  .description("Create an empty stakeout directory and config file.")
  .action(init);

// Catchall for unrecognized commands
program.command("*")
  .description("")
  .action(function(){
    program.help();
  });

program.parse(process.argv);

// No arguments
if (!program.args.length) {
  program.help();
  quit();
}

// Run all tasks
function runall() {

  for (var task in config.tasks) {
    run(task);
  }

}

// Run the specified task
function run(task) {

  var engine,
      current,
      firstRun;

  if (!config.tasks[task]) {
    quit("Task " + task + " hasn't been created yet.");
  }

  // Require the module for this bot
  try {
    engine = require(config.tasks[task].path);
  } catch(e) {
    quit("Error loading task file: " + config.tasks[task].path, e);
  }

  // Get the current value
  try {
    current = readJSON(path.join(stakeoutDir,task + ".json"));
  } catch(e) {
    // current run data doesn't exist
  }

  firstRun = (current === undefined);

  // Run the comparison, callback will include the new value to save
  // and a notification message, if one exists
  engine(current,function(err,newValue,notification) {

    if (err) {
      quit(err); // Unexpected error
    }

    // Save the new value to ~/.stakeout/[task].json
    saveValue(task,newValue);

    // Don't notify on the first run
    if (notification && !firstRun) {

      // Send Slack notifications
      config.tasks[task].notify.slack.forEach(function(channel){

        notifier.slack({
          channel: channel,
          username: config.SLACK_NAME,
          icon: config.SLACK_ICON,
          text: notification,
          subdomain: config.SLACK_SUBDOMAIN
      },config.SLACK_WEBHOOK_URL);

      });

      // Send emails
      if (config.tasks[task].notify.email.length) {

        notifier.email({
          to: config.tasks[task].notify.email,
          subject: config.EMAIL_SUBJECT_PREFIX + task,
          body: notification,
          from: config.EMAIL_FROM
        },config.MAILGUN_API_KEY);

      }

    }

  });

}

// List all tasks
function list() {

  // Get a pretty display version of each task
  var entries = _.pairs(config.tasks).map(function(pair){

    // Combined recipient list
    var recipients = _.flatten(_.values(pair[1].notify));

    var lines = [pair[0],pair[0].replace(/./g,"=")];

    if (pair[1].description) {
      lines.push(pair[1].description);
    }

    if (recipients.length) {
      lines.push("Notifying: "+recipients.join(", "));
    } else {
      lines.push("No one is receiving notifications yet.");
    }

    return lines.join("\n");

  });

  // Show the list
  if (!entries.length) {
    console.log("No tasks found.");
  } else {
    console.log("\n" + entries.join("\n\n") + "\n");
  }

}

// Remove all data files
function cleanall() {

  for (task in config.tasks) {
    clean(task);
  }

}

// Remove data file for a task
function clean(task) {

  if (!config.tasks[task]) {
    quit("Task " + task + " hasn't been created yet.");
  }

  try {
    fs.unlinkSync(path.join(stakeoutDir,task+".json"));
  } catch (e) {
    if (e.code !== "ENOENT") {
      quit(e); // Unexpected error
    }
  }

  console.log("Cleaned data for task " + task + ".");

}

// Prompt for config variables
function doConfig() {

  prompt.start();
  prompt.get(configurable,function(err,results){

    if (err) {
      quit(err);
    }

    // Update config with values supplied by user
    configurable.forEach(function(option){
      if (results[option.name]) {
        config[option.name] = results[option.name];
      } else {
        delete config[option.name];
      }
    })

    saveConfig("Configuration updated.");

  });

}

// Create a new task
function add(task,options) {


  if (taskExists(task,true)) {
    quit("Task " + task + " already exists.");
  }

  if (!task) {
    program.help();
  }

  if (!options.path) {
    quit("The --path or -p option is required when adding a new task");
  }

  // Set up an empty entry for the new task
  config.tasks[task] = {
    notify: {
      email: [],
      slack: []
    },
    path: path.resolve(options.path)
  };

  if (options.description && typeof options.description === "string") {
    config.tasks[task].description = options.description;
  }

  saveConfig("Created new task: " + task);

}

// Remove a task
function remove(task) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found.");
  }

  delete config.tasks[task];

  try {
    fs.unlinkSync(path.join(stakeoutDir,task+".json"));
  } catch (e) {
    if (e.code !== "ENOENT") {
      quit(e); // Unexpected error
    }
  }

  saveConfig("Removed task: " + task);

}

// Rename a task
function rename(oldTask,newTask) {

  if (!taskExists(oldTask)) {
    quit("Task " + oldTask + " not found.");
  }

  // Make sure the new name isn't in use
  if (taskExists(newTask,true)) {
    quit("Task " + newTask + " already exists.");
  }

  config.tasks[newTask] = config.tasks[oldTask];

  delete config.tasks[oldTask];

  // Move the logfile too
  try {
    fs.renameSync(path.join(stakeoutDir,oldTask+".json"),path.join(stakeoutDir,newTask+".json"));
  } catch (e) {
    if (e.code !== "ENOENT") {
      quit(e); // Unexpected error
    }
  }

  saveConfig("Renamed " + oldTask + " to " + newTask);

}


// Add a watcher to a task
function watch(task,watchers) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found");
  }

  if (!watchers) {
    program.help();
  }

  // Split on commas
  watchers = watchers.split(",");

  // Add each watcher to the appropriate list
  watchers.forEach(function(watcher){

    watcher = watcher.trim();

    if (!watcher) {
      return true;
    }

    var type = isSlack(watcher) ? "slack" : "email";

    config.tasks[task].notify[type].push(watcher);
    config.tasks[task].notify[type] = unique(config.tasks[task].notify[type]);

  });

  saveConfig("Added " + watchers.join(", ") + " to receive " + task + " notifications.");

}

// Remove a watcher from a task
function unwatch(task,watchers) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found");
  }

  if (!watchers) {
    program.help();
  }

  // Split on commas
  watchers = watchers.split(",");

  // Remove each watcher from the appropriate list
  watchers.forEach(function(watcher){

    watcher = watcher.trim();

    if (!watcher) {
      return true;
    }

    var type = isSlack(watcher) ? "slack" : "email";

    config.tasks[task].notify[type] = config.tasks[task].notify[type].filter(function(w){
      return w.toLowerCase() !== watcher.toLowerCase();
    });

  });

  saveConfig("Removed " + watchers.join(", ") + " from receiving " + task + " notifications.");

}

// Initialize an empty ~/.stakeout/config file
function init() {
  fs.stat(path.join(stakeoutDir,"config"),function(err,stat){
    if (err) {
      saveConfig("Stakeout initialized.\nData is stored in: ~/.stakeout/\nConfiguration file is located at: ~/.stakeout/config");
    } else {
      console.log("Stakeout configuration file already exists.");
    }
  });
}

// Save the task file back out
// doing this sync in case there are multiple tasks running at once
// probably a bad idea. TODO: fix this
// log a message on success
function saveConfig(msg) {

  try {
    writeYAML(path.join(stakeoutDir,"config"),config);
  } catch (e) {
    quit(e);
  }

  if (msg) {
    console.log(msg);
  }

}

// Save a new data file for a particular task
function saveValue(task,val) {

  try {
    writeJSON(path.join(stakeoutDir,task + ".json"),val);
  } catch (e) {
    quit(e);
  }

}

// Is it a Slack username or channel?
function isSlack(watcher) {
  return watcher.match(/^[@|#]/);
}

// Get case-insensitive unique array
function unique(arr) {
  return _.uniq(arr,function(d){
    return d.toLowerCase();
  });
}


function writeYAML(filename,data) {
  fs.writeFileSync(filename,yaml.safeDump(data));
}

function writeJSON(filename,data) {
  fs.writeFileSync(filename,JSON.stringify(data,null,"  "));
}

function readYAML(filename) {
  return yaml.safeLoad(read(filename));
}

function readJSON(filename) {
  return JSON.parse(read(filename));
}

function read(filename) {
  return fs.readFileSync(filename,{encoding:"utf8"});
}

// Check whether a task already exists
function taskExists(task,caseInsensitive) {

  if (!caseInsensitive) {

    return config.tasks[task] !== undefined;

  }

  var lower = task.toLowerCase(),
      found;

  for (var key in config.tasks) {
    if (key.toLowerCase() === lower) {
      return true;
    }
  }

  return false;

}

// Error out without a throw-style stack trace
function quit(msg, e) {

  if (msg) {
    console.warn(msg, e || "");
  }

  process.exit(1);

}